一、spring的好处：
  1、降低组件之间的耦合度，实现软件各层之间的解耦。
  2、可以使用容器提供的众多服务，如，事务管理服务、信息服务。
  3、容器提供单例模式支持
  4、容器提供了AOP技术，利用它很容易实现如权限拦截、运行期监控
  5、容器提供众多辅助作类，使用这些类能够加快应用开发
  6、Spring对于主流的应用框架提供了集成支持。

 
  dist\spring.jar
  lib\jakarta-commons\commons-logging.jar

  lib\aspectj/aspectjweaver.jar 和 aspectjrt.jar
  lib/cglib/cglib-nodep-2.1_3.jar

二、实例化Spring
  ApplicationContext ctx = new ClassPathXmlApplicationContext(new String[]{"beans.xml"})

  beans.xml
    <bean> 的id属性的值不能有特殊字符，而name属性的值可以有特殊字符。

三、三种实例化bean的方式

  1、使用类构造实例化  (默认情况下是单实例。)
    <bean id="personService" class="com.sunyahui.service.impl.PersonServiceBean"></bean>
  2、使用静态工厂方法实例化
    <bean id="personService2" class="com.sunyahui.service.impl.PersonServiceBeanFactory"
		factory-method="createPersonServiceBean"></bean>
  3、使用实例工厂方法实例化
    <bean id="personServiceFactory"       class="com.sunyahui.service.impl.PersonServiceBeanFactory"></bean>
    <bean id="personService3" factory-bean="personServiceFactory"
		factory-method="createPersonServiceBean1"></bean>

四、Bean的作用域
  通过<bean  .....scope="选择下面其中一个属性">
   .singleton （默认，不会创建新对象，默认请况bean的实例化在创建容器的时候就开始实例化      。有一种方法延迟实例化，lazy_init="true"）
   .prototype (每次从容器获取bean都是新的对象，如果设置prototype，bean的实例化是在调用   getbean（）之后实例化。)
   .request
   .session
   .global session

五、注入其他bean：
  方式一：
     《其他对象》
     <bean id="personDao" class="com.sunyahui.dao.impl.PersonDaoBean"></bean>
	
      <bean id="personService" class="com.sunyahui.service.impl.PersonServiceBean">
	 	<property name="personDaoBean" ref="personDao"></property>
	 </bean>
  方式二：（使用内部bean，但该bean不能被其他bean使用）
      <bean id="personService" class="com.sunyahui.service.impl.PersonServiceBean">
	 	<property name="personDaoBean" >
	 	  <bean class="com.sunyahui.dao.impl.PersonDaoBean"/>
	 	</property>
	 </bean>

六、注入Set集合
    <bean id="personService" class="com.sunyahui.service.impl.PersonServiceBean">
			<property name="set">
			<set>
				<value>第一个</value>
				<value>第二个</value>
				<value>第三个</value>
			</set>
			</property>	   
	   </bean>
   注入List集合
     <bean id="personService" class="com.sunyahui.service.impl.PersonServiceBean">
			<property name="list">
			<list>
				<value>第一个</value>
				<value>第二个</value>
				<value>第三个</value>
			</list>
			</property>	   
	   </bean>
七、依赖注入
  1、手工装配对象:
   .使用构造器注入
      <bean id="personDao" class="com.sunyahui.dao.impl.PersonDaoBean"></bean>
      <bean id="personService" class="com.sunyahui.service.impl.PersonServiceBean1">
          <constructor-arg index="0"             type="com.sunyahui.dao.PersonDao"ref="personDao"></constructor-arg>
	    <constructor-arg index="1"  value="孙雅晖"></constructor-arg>  
	 </bean>
   .使用属性setter方法注入
   .使用Field注入 (注解方式)

   注入依赖对象可以采用：1、手工装配对象（实际应用建议使用）；2、自动装配依赖对象

<context:component-scan base-package="cn.XX">
@Service用于标注业务层组件
@Controller用于标注控制层组件
@Repository用于标注数据访问组件
@Component泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。

AOP中的概念
Aspect（切面）：指横切性关注点的抽象即为切面，它与类相似，只是两者的关注点不一样，类是对物体特征的抽象，而切面是横切性关注点的抽象

joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中，这些点指的是方法。因为spring只支持方法类型的连接点，实际上joinpoint还可以是field或类构造器

Pointcut（切入点）：所谓切入点就是指我们要对那些joinpoint进行拦截的定义。

Advice（通知）：所谓通知就是指拦截到joinpoint之后所要做的事情就是通知，通知分为前置通知，后置通知，异常通知，最终通知，环绕通知。

Targer（目标对象）：代理的目标对象

Weave（织入）：指将aspect应用到target对象并导致proxy对象创建的过程称为织入。

Introduction（引入）：在不修改类代码的前提下，introduction可以在运行期为类动态地添加一些方法或FIeld